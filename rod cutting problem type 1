//same as unbounded knapsack
#include<stdio.h>
#include<stdlib.h>
int uknapsack(int wt[],int val[],int n,int W);
int max(int a,int b);
int max(int a,int b)
    {
        return (a>b) ? a:b;
    }
int main()
{
    int k,wt[1000],W,val[1000],n;
    scanf("%d %d",&n,&W);
    for(k=0;k<n;k++)
    {
        scanf("%d",&val[k]);
    }
    
    for(k=0;k<n;k++)
    {
        wt[k]=k+1;
    }
    printf("%d",uknapsack(wt,val,n,W));
    
}
int uknapsack(int wt[],int val[],int n,int W)
{
    int i,j,t[n+1][W+1];
    for(i=0;i<n+1;i++)
    {
        
        for(j=0;j<W+1;j++)
        {
            if(i==0 || j==0)
            {
                t[i][j]=0;
            }
        }
    }
    for(i=1;i<n+1;i++)
    {
        for(j=1;j<W+1;j++)
        {
            if(wt[i-1]<=j)
            {
            t[i][j]=max((t[i-1][j]),(val[i-1]+t[i][j-wt[i-1]]));
            }
            else
            {
                t[i][j]=t[i-1][j];
            }
        }
    }
    
    return t[n][W];
}
